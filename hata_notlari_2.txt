timer içindeki kodun asıl hali bu



                        ulong unlockTimeForNodeWallet = NVG.NOW.Int;
                        NVS.WalletBalanceStruct tmpValidatorWalletBalance = NGF.Balance.Get(NVG.Settings.NodeWallet.WalletKey, unlockTimeForNodeWallet);
                        Dictionary<string, byte> tmpWalletList = new Dictionary<string, byte>() { };
                        tmpWalletList.Clear();

                        List<string> tmpKeyList = new List<string>();
                        tmpKeyList.Clear();
                        BigInteger totalBlockReward = 0;

                        NVClass.BlockStruct_120 tmpBlockCipherData = new NVClass.BlockStruct_120()
                        {
                            In = new Dictionary<string, NVClass.BlockStruct_120_In_Struct>(),
                            //                  who                 coin               time   volume
                            Out = new Dictionary<string, Dictionary<string, Dictionary<ulong, string>>>(),
                            Validator = new NVS.ValidatorStruct()
                            {
                                NodeWallet = NVG.Settings.NodeWallet.WalletKey,
                                Reward = totalBlockReward.ToString()
                            }
                        };

                        // wallet balances are assigned
                        Int64 transferFee = Notus.Wallet.Fee.Calculate(
                            NVE.Fee.CryptoTransfer,
                            NVG.Settings.Network,
                            NVG.Settings.Layer
                        );
                        ulong transactionCount = 0;
                        foreach (KeyValuePair<string, NVS.CryptoTransactionStoreStruct> entry in NVG.Settings.Transfer.GetList())
                        {
                            NVS.CryptoTransactionStoreStruct tmpObjPoolCrypto = entry.Value;
                            bool thisRecordCanBeAdded = NGF.Balance.CheckTransactionAvailability(
                                tmpObjPoolCrypto.Sender,
                                tmpObjPoolCrypto.Receiver
                            );
                            //omergoksoy
                            //NP.Info(transactionCount.ToString() + " -> " + (thisRecordCanBeAdded == true ? "true" : "false"));
                            if (thisRecordCanBeAdded == true)
                            {
                                bool walletHaveEnoughCoinOrToken = true;
                                bool senderExist = tmpWalletList.ContainsKey(tmpObjPoolCrypto.Sender);
                                bool receiverExist = tmpWalletList.ContainsKey(tmpObjPoolCrypto.Receiver);
                                //Console.WriteLine(senderExist)
                                if (senderExist == false && receiverExist == false)
                                {
                                    tmpWalletList.Add(tmpObjPoolCrypto.Sender, 1);
                                    tmpWalletList.Add(tmpObjPoolCrypto.Receiver, 1);

                                    NVS.WalletBalanceStruct tmpSenderBalance = NGF.Balance.Get(tmpObjPoolCrypto.Sender, unlockTimeForNodeWallet);
                                    NVS.WalletBalanceStruct tmpReceiverBalance = NGF.Balance.Get(tmpObjPoolCrypto.Receiver, unlockTimeForNodeWallet);
                                    //NP.Info("sewnder      : " + JsonSerializer.Serialize(tmpSenderBalance));
                                    //NP.Info("receiver     : " + JsonSerializer.Serialize(tmpReceiverBalance));
                                    string tmpTokenTagStr = "";
                                    BigInteger tmpTokenVolume = 0;

                                    if (string.Equals(tmpObjPoolCrypto.Currency, NVG.Settings.Genesis.CoinInfo.Tag))
                                    {
                                        tmpTokenTagStr = NVG.Settings.Genesis.CoinInfo.Tag;
                                        BigInteger WalletBalanceInt = NGF.Balance.GetCoinBalance(tmpSenderBalance, tmpTokenTagStr);
                                        BigInteger RequiredBalanceInt = BigInteger.Parse(tmpObjPoolCrypto.Volume);
                                        tmpTokenVolume = RequiredBalanceInt;
                                        if ((RequiredBalanceInt + transferFee) > WalletBalanceInt)
                                        {
                                            walletHaveEnoughCoinOrToken = false;
                                        }
                                    }
                                    else
                                    {
                                        if (tmpSenderBalance.Balance.ContainsKey(NVG.Settings.Genesis.CoinInfo.Tag) == false)
                                        {
                                            walletHaveEnoughCoinOrToken = false;
                                        }
                                        else
                                        {
                                            BigInteger coinFeeBalance = NGF.Balance.GetCoinBalance(tmpSenderBalance, NVG.Settings.Genesis.CoinInfo.Tag);
                                            if (transferFee > coinFeeBalance)
                                            {
                                                walletHaveEnoughCoinOrToken = false;
                                            }
                                            else
                                            {
                                                BigInteger tokenCurrentBalance = NGF.Balance.GetCoinBalance(tmpSenderBalance, tmpObjPoolCrypto.Currency);
                                                BigInteger RequiredBalanceInt = BigInteger.Parse(tmpObjPoolCrypto.Volume);
                                                if (RequiredBalanceInt > tokenCurrentBalance)
                                                {
                                                    walletHaveEnoughCoinOrToken = false;
                                                }
                                                else
                                                {
                                                    tmpTokenTagStr = tmpObjPoolCrypto.Currency;
                                                    tmpTokenVolume = RequiredBalanceInt;
                                                }
                                            }
                                        }
                                    }

                                    if (walletHaveEnoughCoinOrToken == false)
                                    {
                                        NVG.Settings.Transfer.Remove(entry.Key);
                                        NVG.Settings.TxStatus.Set(entry.Key, new NVS.CryptoTransferStatus()
                                        {
                                            Code = NVE.BlockStatusCode.Rejected,
                                            RowNo = 0,
                                            UID = "",
                                            Text = "Rejected"
                                        });
                                    }
                                    else
                                    {
                                        totalBlockReward = totalBlockReward + transferFee;
                                        transactionCount++;
                                        if (tmpBlockCipherData.Out.ContainsKey(tmpObjPoolCrypto.Sender) == false)
                                        {
                                            tmpBlockCipherData.Out.Add(tmpObjPoolCrypto.Sender, GetWalletBalanceDictionary(tmpObjPoolCrypto.Sender, unlockTimeForNodeWallet));
                                        }
                                        if (tmpBlockCipherData.Out.ContainsKey(tmpObjPoolCrypto.Receiver) == false)
                                        {
                                            tmpBlockCipherData.Out.Add(tmpObjPoolCrypto.Receiver, GetWalletBalanceDictionary(tmpObjPoolCrypto.Receiver, unlockTimeForNodeWallet));
                                        }
                                        //NP.Basic("entry.Key : " + entry.Key);
                                        tmpBlockCipherData.In.Add(entry.Key, new NVClass.BlockStruct_120_In_Struct()
                                        {
                                            Fee = tmpObjPoolCrypto.Fee,
                                            PublicKey = tmpObjPoolCrypto.PublicKey,
                                            Sign = tmpObjPoolCrypto.Sign,
                                            CurrentTime = tmpObjPoolCrypto.CurrentTime,
                                            Volume = tmpObjPoolCrypto.Volume,
                                            Currency = tmpObjPoolCrypto.Currency,
                                            Receiver = new NVClass.WalletBalanceStructForTransaction()
                                            {
                                                Balance = NGF.Balance.ReAssign(tmpReceiverBalance.Balance),
                                                Wallet = tmpObjPoolCrypto.Receiver,
                                                WitnessBlockUid = tmpReceiverBalance.UID,
                                                WitnessRowNo = tmpReceiverBalance.RowNo
                                            },
                                            Sender = new NVClass.WalletBalanceStructForTransaction()
                                            {
                                                Balance = NGF.Balance.ReAssign(tmpSenderBalance.Balance),
                                                Wallet = tmpObjPoolCrypto.Sender,
                                                WitnessBlockUid = tmpSenderBalance.UID,
                                                WitnessRowNo = tmpSenderBalance.RowNo
                                            }
                                        });

                                        // transfer fee added to validator wallet

                                        tmpValidatorWalletBalance = NGF.Balance.AddVolumeWithUnlockTime(
                                            tmpValidatorWalletBalance,
                                            transferFee.ToString(),
                                            NVG.Settings.Genesis.CoinInfo.Tag,
                                            unlockTimeForNodeWallet
                                        );
                                        //tmpBlockCipherData.Out[NVG.Settings.NodeWallet.WalletKey] = tmpValidatorWalletBalance.Balance;

                                        // sender pays transfer fee
                                        (bool tmpErrorStatusForFee, NVS.WalletBalanceStruct tmpNewResultForFee) =
                                        NGF.Balance.SubtractVolumeWithUnlockTime(
                                            tmpSenderBalance,
                                            transferFee.ToString(),
                                            NVG.Settings.Genesis.CoinInfo.Tag,
                                            unlockTimeForNodeWallet
                                        );
                                        if (tmpErrorStatusForFee == true)
                                        {
                                            Console.WriteLine("Coin Needed - Main.Cs -> Line 498");
                                            Console.WriteLine("Coin Needed - Main.Cs -> Line 498");
                                            Console.ReadLine();
                                        }

                                        // sender give coin or token
                                        (bool tmpErrorStatusForTransaction, NVS.WalletBalanceStruct tmpNewResultForTransaction) =
                                        NGF.Balance.SubtractVolumeWithUnlockTime(
                                            tmpNewResultForFee,
                                            tmpTokenVolume.ToString(),
                                            tmpTokenTagStr,
                                            unlockTimeForNodeWallet
                                        );
                                        if (tmpErrorStatusForTransaction == true)
                                        {
                                            Console.WriteLine("Coin Needed - Main.Cs -> Line 498");
                                            Console.WriteLine("Coin Needed - Main.Cs -> Line 498");
                                            Console.ReadLine();
                                        }
                                        tmpBlockCipherData.Out[tmpObjPoolCrypto.Sender] = tmpNewResultForTransaction.Balance;

                                        //receiver get coin or token
                                        NVS.WalletBalanceStruct tmpNewReceiverBalance = NGF.Balance.AddVolumeWithUnlockTime(
                                            tmpReceiverBalance,
                                            tmpObjPoolCrypto.Volume,
                                            tmpObjPoolCrypto.Currency,
                                            tmpObjPoolCrypto.UnlockTime
                                        );
                                        tmpBlockCipherData.Out[tmpObjPoolCrypto.Receiver] = tmpNewReceiverBalance.Balance;
                                    }
                                }
                            }
                        }
                        //NP.Basic("transactionCount : " + transactionCount.ToString());
                        if (transactionCount > 0)
                        {
                            foreach (KeyValuePair<string, Dictionary<string, Dictionary<ulong, string>>> walletEntry in tmpBlockCipherData.Out)
                            {
                                foreach (KeyValuePair<string, Dictionary<ulong, string>> currencyEntry in walletEntry.Value)
                                {
                                    List<ulong> tmpRemoveList = new List<ulong>();
                                    foreach (KeyValuePair<ulong, string> balanceEntry in currencyEntry.Value)
                                    {
                                        if (balanceEntry.Value == "0")
                                        {
                                            tmpRemoveList.Add(balanceEntry.Key);
                                        }
                                    }
                                    for (int innerForCount = 0; innerForCount < tmpRemoveList.Count; innerForCount++)
                                    {
                                        tmpBlockCipherData.Out[walletEntry.Key][currencyEntry.Key].Remove(tmpRemoveList[innerForCount]);
                                    }
                                }
                            }
                            tmpBlockCipherData.Validator.Reward = totalBlockReward.ToString();
                            Console.WriteLine("");
                            Console.WriteLine(JsonSerializer.Serialize(tmpBlockCipherData));
                            Console.WriteLine("--------  COIN TRANSFER DATA CHANGE -----------");

                            // crypto / token transfer
                            NGF.BlockQueue.Add(new NVS.PoolBlockRecordStruct()
                            {
                                uid = NGF.GenerateTxUid(),
                                type = NVE.BlockTypeList.CryptoTransfer,
                                data = JsonSerializer.Serialize(tmpBlockCipherData)
                            });
                        }



